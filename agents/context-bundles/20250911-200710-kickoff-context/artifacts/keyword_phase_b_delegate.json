{"success":true,"results":[{"id":25562,"url":"file://PRP.md","chunk_number":1,"content":"### Phase B — Delegate (Sub‑agents)\n4. **Sub‑agent doc/web ingestion**\n   - Use `.claude/commands/load_ai_docs.md` with a **system‑prompted** workflow:\n     **Purpose → Variables → Workflow → Report format**.\n   - Steps: primary agent reads a seed file → spawns N sub‑agents to fetch/scrape docs (one URL per sub‑agent) → each writes outputs to `agents/ai-docs/…` and a concise summary.\n   - Ensure tokens burn inside sub‑agents; primary receives only summaries + paths.\n\n**Gate B:** Primary context remains under ~10k tokens during ingestion; outputs saved; summaries generated.\n\n### Phase C — Advanced R&D (Bundles + Background)\n5. **Context bundles (append‑only logs)**\n   - Use hooks or the provided scripts so each **read/search/prompt** appends to `agents/context-bundles/<timestamp>_<session>/bundle.jsonl`:\n     - `prompt` (purpose + arguments)\n     - `reads` (deduped file list)\n     - `key_findings` (concise bullets)\n   - Use the provided loader script to dedupe reads, reconstruct key findings, and print a **one‑screen recap**.\n\n6. **Background primary agent delegation**\n   - `.claude/commands/background.md` starts a detached agent using arguments (model, task, report file path, working dir).\n   - The background agent writes progress to `reports/<task>/<timestamp>.report.md` and **renames** it to `…_completed.md` when done.\n\n**Gate C:** Able to remount a blown context to ~70% state from a bundle; background agent produces a completed report file.\n\n## 7) Validation & QA Gates\n- **Gate A (Reduce):** Boot audit shows ≥90% free, ≤500‑token memory, 0 MCP servers loaded.\n- **Gate B (Delegate):** Sub‑agent run saves N outputs; primary agent token use stays under the cap; report includes URL → file mapping.\n- **Gate C (Bundles/Background):** Bundle loader reconstructs prior state with deduped reads; background report file is present and renamed to `…_completed.md`.\n- **Smoke tests:** Run a sample “docs refresh” and “quick plan” to verify end‑to‑end R&D flow.\n\n## 8) Metrics to Track\n- Startup tokens (before/after).  \n- Total tokens burned **in primary** vs **in sub/background agents**.  \n- Latency per task stage (prime → ingest → plan → implement).  \n- One‑shot success rate of out‑loop tasks.  \n- Number of re‑primes required.\n\n## 9) Rollout & Ops\n- Land the memory and command changes on a feature branch; run against one repo for 48 hours; compare metrics.  \n- If gains ≥20% primary‑token reduction and stable success rate, roll to all projects.  \n- Add a weekly lint to block memory file growth; review MCP configs in PRs.\n\n## 10) Team Playbook\n- Keep the universal memory tiny; everything else is a **prime**.  \n- Never autoload MCP servers; pass explicit configs per run.  \n- Use sub‑agents for web/doc I/O and heavy reads.  \n- Always write a bundle; reload bundles when the window explodes.  \n- Prefer background delegation to get out of the loop.","metadata":{"url":"file://PRP.md","tags":["prp","project"],"source":"file_PRP_md_6032efe2","headers":"### Phase B — Delegate (Sub‑agents); ### Phase C — Advanced R&D (Bundles + Background); ## 7) Validation & QA Gates; ## 8) Metrics to Track; ## 9) Rollout & Ops; ## 10) Team Playbook","filename":"PRP.md","has_code":false,"has_links":false,"source_id":"file_PRP_md_6032efe2","char_count":2880,"chunk_size":2880,"line_count":47,"word_count":427,"chunk_index":1,"source_type":"file","knowledge_type":"business"},"source_id":"file_PRP_md_6032efe2","similarity":0.103779129683971,"match_type":"keyword"},{"id":25561,"url":"file://PRP.md","chunk_number":0,"content":"This chunk contains the full initial section of the \"PRP — Mastering Context Engineering for Agent Performance\" document, including the owner, date, goal, summary, success criteria, scope, and non-goals. It provides a comprehensive overview of the best practices and objectives for improving agent performance through context reduction and delegation strategies.\n\nCHUNK 2: This chunk is a partial excerpt of the same document, specifically the beginning of the \"Summary\" section, which is cut off. It situates within the overall document as an incomplete part of the introductory explanation of the PRP, likely intended to elaborate on the \"Reduce\" principle before the full details are provided.\n\nCHUNK 3: This chunk details a specific phase (\"Phase B — Delegate (Sub‑agents)\") focusing on the process of sub-agent document/web ingestion, including the workflow steps, command usage, and the gate condition. It situates within the document as a procedural example of delegation practices for handling token-heavy\\n\\n# PRP — Mastering Context Engineering for Agent Performance (R&D Best Practices)\n\n**Owner:** Ciaran Cox  \n**Date:** 2025‑09‑10  \n**Goal:** Implement a repeatable Reduce & Delegate (R&D) context‑engineering workflow that produces faster, more reliable, and cheaper agent runs by shrinking the primary context window and offloading heavy work to focused agents.\n\n## 1) Summary (Why / What)\nA focused agent is a performant agent. This PRP operationalizes R&D best practices:\n- **Reduce** what enters the primary agent’s context at boot and during loops.\n- **Delegate** token‑heavy tasks to sub‑agents or background primary agents and persist outcomes as files/bundles.\n\n**Desired outcome:** Boot with a slim, universal memory; load only task‑specific tools/context on demand; orchestrate sub‑agents/background agents for heavy I/O; maintain replayable **context bundles** so work continues cleanly after context explosions.\n\n## 2) Success Criteria (Definition of Done)\n1. **Boot budget:** Primary agent starts with ≥90% free context; always‑on memory ≤500 tokens.\n2. **MCP hygiene:** No default MCP servers autoloaded; task runs pass in an explicit MCP config.\n3. **Priming over memory:** Task types use **prime commands** (bug/feature/docs/CC) to read only the minimal files needed.\n4. **Delegation:** Web/doc reads and other token‑heavy steps run in **sub‑agents** or **background primary agents** and write artifacts to disk.\n5. **Context bundles:** Each significant run writes an append‑only bundle (prompt + reads + key findings). A new agent can **/load** a bundle to remount state to ~70% without re‑reading everything.\n6. **Reporting:** Background agents write to a report file and rename it on completion.\n\n## 3) Scope / Non‑Goals\n- **In scope:** Agent context hygiene, MCP configuration discipline, priming commands, sub‑agent workflows, background agent delegation, context bundle logging, Makefile/CLI wrappers, CI lint.\n- **Out of scope:** New product features beyond these workflow changes; model/provider swaps; IDE migration.\n\n## 4) Inputs & Artifacts\n**Inputs**\n- Existing repo and Claude‑style slash‑command support.\n- Optional MCP servers (e.g., web fetch / Firecrawl) available but **not** autoloaded.\n\n**Artifacts produced**\n- `memory/concise.md` — tiny universal memory file.\n- `.claude/commands/prime_*.md` — reusable primes (bug, feature, docs, cc).\n- `.claude/commands/background.md` — fires a background instance + report file.\n- `.claude/commands/load_ai_docs.md` — sub‑agent doc ingestion.\n- `.claude/commands/load_bundle.md` — remount prior state.\n- `agents/context-bundles/…` — append‑only run trails.\n- `reports/**` — status & outputs from background/prime runs.\n- `configs/mcp/firecrawl.json` — example strict per‑task MCP config.\n- `scripts/lint_memory.py` — CI lint for memory size.\n- `scripts/context_bundle_writer.py`, `scripts/load_bundle.py` — bundle utilities.\n- `Makefile` — convenience wrappers.\n- `.github/workflows/lint-memory.yml` — CI enforcement.\n\n## 5) Constraints & Risks\n- **Risk (coordination):** Sub‑agent chatter or oversized outputs can re‑bloat context.  \n  **Mitigation:** Return **summaries + file paths**, not raw dumps.\n- **Risk (memory creep):** Teams expand universal memory over time.  \n  **Mitigation:** Hard cap lines/tokens; everything else moves to primes.\n- **Risk (tool sprawl):** Loading many MCP servers “just in case.”  \n  **Mitigation:** Enforce explicit per‑task MCP configs.\n\n## 6) Implementation Plan (R&D in action)\n\n### Phase A — Reduce\n1. **Kill default MCP autoload**\n   - Remove `default.mcp.json` (or equivalent).\n   - Create per‑task configs (e.g., `configs/mcp/firecrawl.json`).\n   - Run tasks with a strict flag in your tool (e.g., `--strict-mcp-config <path>`).\n\n2. **Slim universal memory**\n   - Replace the giant always‑on memory file with `memory/concise.md` (≤50 lines).\n   - Keep only **universal, always‑true** rules (style, output format, safety, short glossary).\n   - Add a CI check that fails if the file exceeds token/line caps.\n\n3. **Adopt context priming**\n   - Add primes:\n     - `.claude/commands/prime_bug.md`\n     - `.claude/commands/prime_feature.md`\n     - `.claude/commands/prime_docs.md`\n     - `.claude/commands/prime_cc.md`\n   - **Prime template (all primes follow this):**\n     - **Purpose** — one‑line intent.\n     - **Run** — minimal steps for this task type.\n     - **Read** — explicit file list/globs (keep tiny).\n     - **Report** — where to write status/summary.\n\n**Gate A:** Boot context free ≥90%; memory ≤500 tokens; no MCP servers loaded by default.","metadata":{"url":"file://PRP.md","tags":["prp","project"],"source":"file_PRP_md_6032efe2","headers":"# PRP — Mastering Context Engineering for Agent Performance (R&D Best Practices); ## 1) Summary (Why / What); ## 2) Success Criteria (Definition of Done); ## 3) Scope / Non‑Goals; ## 4) Inputs & Artifacts; ## 5) Constraints & Risks; ## 6) Implementation Plan (R&D in action); ### Phase A — Reduce","filename":"PRP.md","has_code":false,"has_links":false,"source_id":"file_PRP_md_6032efe2","char_count":4563,"chunk_size":5580,"line_count":78,"word_count":610,"chunk_index":0,"source_type":"file","knowledge_type":"business","contextual_embedding":true},"source_id":"file_PRP_md_6032efe2","similarity":0.101690851151943,"match_type":"keyword"}],"query":"Phase B — Delegate (Sub‑agents)","source":null,"match_count":20,"total_found":2,"execution_path":"keyword_only"}