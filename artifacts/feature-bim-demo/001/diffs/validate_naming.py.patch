diff --git a/scripts/revit/validate_naming.py b/scripts/revit/validate_naming.py
new file mode 100644
index 0000000..d5a5c9b
--- /dev/null
+++ b/scripts/revit/validate_naming.py
@@ -0,0 +1,80 @@
+#!/usr/bin/env python3
+"""
+BIM Naming Standards Validator
+
+Reads YAML standards files and provides validation framework for Revit models.
+Currently prints summary of standards; full validation implementation in future stories.
+"""
+
+import argparse
+import sys
+import yaml
+from pathlib import Path
+
+
+def load_standards():
+    """Load BIM standards from YAML files."""
+    base_path = Path(__file__).parent.parent.parent / "data" / "bim" / "standards"
+
+    try:
+        with open(base_path / "naming.yml", 'r') as f:
+            naming_standards = yaml.safe_load(f)
+
+        with open(base_path / "sheets.yml", 'r') as f:
+            sheet_standards = yaml.safe_load(f)
+
+        return naming_standards, sheet_standards
+    except FileNotFoundError as e:
+        print(f"Error: Could not find standards file: {e}")
+        sys.exit(1)
+    except yaml.YAMLError as e:
+        print(f"Error: Invalid YAML format: {e}")
+        sys.exit(1)
+
+
+def print_summary(naming_standards, sheet_standards):
+    """Print summary of loaded standards."""
+    print("BIM Naming Standards Summary")
+    print("=" * 40)
+
+    print("\nFamily Prefixes:")
+    for prefix in naming_standards.get('family_prefixes', []):
+        print(f"  - {prefix}")
+
+    print("\nType Patterns:")
+    for pattern in naming_standards.get('type_patterns', []):
+        print(f"  {pattern['category']}: {pattern['pattern']}")
+        for example in pattern.get('example_types', [])[:2]:  # Show first 2 examples
+            print(f"    Example: {pattern['category']}:{example}")
+
+    print(f"\nSheet Number Pattern: {sheet_standards.get('number_pattern', 'Not defined')}")
+    print("\nSheet Title Examples:")
+    for example in sheet_standards.get('title_examples', [])[:3]:  # Show first 3 examples
+        print(f"  - {example}")
+
+    print("\nValidator Status: STUB - Full validation coming in future stories")
+
+
+def main():
+    parser = argparse.ArgumentParser(
+        description="BIM Naming Standards Validator",
+        epilog="References: data/bim/standards/naming.yml, data/bim/standards/sheets.yml"
+    )
+    parser.add_argument(
+        "--summary",
+        action="store_true",
+        default=True,
+        help="Print standards summary (default action)"
+    )
+
+    args = parser.parse_args()
+
+    # Load standards
+    naming_standards, sheet_standards = load_standards()
+
+    # Print summary (only action for now)
+    print_summary(naming_standards, sheet_standards)
+
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
